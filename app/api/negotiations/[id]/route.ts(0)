import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@/auth';
import { db } from '@/lib/db';
import { negotiations, projects, users } from '@/lib/db/schema';
import { eq, and, or } from 'drizzle-orm';

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await auth();
    
    if (!session?.user) {
      return NextResponse.json(
        { success: false, message: 'يجب تسجيل الدخول أولاً' },
        { status: 401 }
      );
    }

    const { id } = await params;
    const negotiationId = parseInt(id);

    // Get negotiation details with project and user info
    const [negotiation] = await db
      .select({
        id: negotiations.id,
        projectId: negotiations.projectId,
        projectTitle: projects.title,
        creatorId: projects.userId,
        creatorName: users.name,
        investorId: negotiations.investorId,
        status: negotiations.status,
        startDate: negotiations.startDate,
        endDate: negotiations.endDate,
        amount: negotiations.amount,
      })
      .from(negotiations)
      .leftJoin(projects, eq(negotiations.projectId, projects.id))
      .leftJoin(users, eq(projects.userId, users.id))
      .where(eq(negotiations.id, negotiationId))
      .limit(1);

    if (!negotiation) {
      return NextResponse.json(
        { success: false, message: 'التفاوض غير موجود' },
        { status: 404 }
      );
    }

    // Check if user is part of this negotiation
    if (negotiation.investorId !== session.user.id && negotiation.creatorId !== session.user.id) {
      return NextResponse.json(
        { success: false, message: 'غير مصرح لك بالوصول لهذا التفاوض' },
        { status: 403 }
      );
    }

    // Calculate days left
    const endDate = new Date(negotiation.endDate);
    const now = new Date();
    const daysLeft = Math.max(0, Math.ceil((endDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)));

    // Determine other party
    const isInvestor = negotiation.investorId === session.user.id;
    const otherPartyId = isInvestor ? negotiation.creatorId : negotiation.investorId;
    const otherPartyName = isInvestor ? negotiation.creatorName : 'المستثمر';

    return NextResponse.json({
      success: true,
      negotiation: {
        id: negotiation.id,
        projectId: negotiation.projectId,
        projectTitle: negotiation.projectTitle,
        otherParty: {
          id: otherPartyId,
          name: otherPartyName,
          avatar: '',
        },
        status: negotiation.status,
        startDate: negotiation.startDate,
        endDate: negotiation.endDate,
        daysLeft,
        messagesCount: 0, // TODO: Count from messages table
      }
    });

  } catch (error) {
    console.error('Error fetching negotiation:', error);
    return NextResponse.json(
      { success: false, message: 'حدث خطأ أثناء جلب بيانات التفاوض' },
      { status: 500 }
    );
  }
}

