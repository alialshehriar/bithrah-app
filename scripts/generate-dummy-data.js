const { Pool } = require('pg');
const bcrypt = require('bcryptjs');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

// Arabic names
const firstNames = [
  'ูุญูุฏ', 'ุฃุญูุฏ', 'ุนูู', 'ุญุณู', 'ุฎุงูุฏ', 'ุนุจุฏุงููู', 'ุณุนุฏ', 'ููุฏ', 'ุนูุฑ', 'ููุณู',
  'ูุงุทูุฉ', 'ููุฑุฉ', 'ุณุงุฑุฉ', 'ูุฑูู', 'ุนุงุฆุดุฉ', 'ููุฏ', 'ุฑูู', 'ูููุง', 'ุฏุงูุฉ', 'ุฌูุฏ',
  'ุนุจุฏุงูุฑุญูู', 'ุฅุจุฑุงููู', 'ุณูุทุงู', 'ุชุฑูู', 'ูุงุตุฑ', 'ุฑุงุดุฏ', 'ูุดุนู', 'ุจูุฏุฑ', 'ููุตู', 'ุณููุงู',
  'ููู', 'ุฃูู', 'ุฑูุง', 'ุดูุฏ', 'ุบุงุฏุฉ', 'ููู', 'ูุนุฏ', 'ุฑูู', 'ุฌูุงูุฑ', 'ูุทููุฉ'
];

const lastNames = [
  'ุงูุนุชูุจู', 'ุงููุญุทุงูู', 'ุงูุบุงูุฏู', 'ุงูุฏูุณุฑู', 'ุงูุดูุฑู', 'ุงูุญุฑุจู', 'ุงููุทูุฑู', 'ุงูุนูุฒู', 'ุงูุฒูุฑุงูู', 'ุงูุฃุญูุฏู',
  'ุงูุณุจูุนู', 'ุงูุดูุฑู', 'ุงูุนูุฑู', 'ุงูุฌููู', 'ุงูุจููู', 'ุงูุฑุดูุฏู', 'ุงูุฎุงูุฏู', 'ุงูุณููู', 'ุงูุนุณูุฑู', 'ุงูููุฏ'
];

// Project categories and titles
const projectCategories = ['tech', 'health', 'education', 'environment', 'art', 'business'];
const projectTitles = [
  'ููุตุฉ ุชุนููููุฉ ุฐููุฉ', 'ุชุทุจูู ุตุญู ูุชูุงูู', 'ูุธุงู ุฅุฏุงุฑุฉ ุงููุดุงุฑูุน', 'ูุชุฌุฑ ุฅููุชุฑููู ูุจุชูุฑ',
  'ุชุทุจูู ุชูุตูู ุทุนุงู', 'ููุตุฉ ุชูุงุตู ุงุฌุชูุงุนู', 'ูุธุงู ุญุฌุฒ ููุงุนูุฏ', 'ุชุทุจูู ุชุนูู ุงููุบุงุช',
  'ููุตุฉ ุงุณุชุซูุงุฑูุฉ', 'ุชุทุจูู ุฑูุงุถู', 'ูุธุงู ูุญุงุณุจุฉ ุณุญุงุจู', 'ููุตุฉ ุนูุงุฑูุฉ',
  'ุชุทุจูู ุณูุงุญู', 'ูุธุงู ุฅุฏุงุฑุฉ ุงููุฎุฒูู', 'ููุตุฉ ุชูุธูู', 'ุชุทุจูู ูุงูู',
  'ูุธุงู ุทุจู ุฐูู', 'ููุตุฉ ุชุณููู ุฑููู', 'ุชุทุจูู ููุงูุฉ ุจุฏููุฉ', 'ูุธุงู ุฃูู ุณูุจุฑุงูู',
  'ููุตุฉ ุชุฌุงุฑุฉ ุฅููุชุฑูููุฉ', 'ุชุทุจูู ุชูุตูู', 'ูุธุงู ุฅุฏุงุฑุฉ ุนูุงูุงุช ุงูุนููุงุก', 'ููุตุฉ ุชุนููู ุนู ุจุนุฏ',
  'ุชุทุจูู ุญุฌุฒ ููุงุฏู', 'ูุธุงู ููุงุท ุจูุน', 'ููุตุฉ ุงุณุชุดุงุฑุงุช', 'ุชุทุจูู ุฃูุนุงุจ ุชุนููููุฉ',
  'ูุธุงู ุฅุฏุงุฑุฉ ุงููุทุงุนู', 'ููุตุฉ ุฎุฏูุงุช ููุฒููุฉ'
];

// Community names
const communityNames = [
  'ูุฌุชูุน ุงููุทูุฑูู ุงูุณุนูุฏููู', 'ุฑูุงุฏ ุงูุฃุนูุงู ุงูุดุจุงุจ', 'ูุณุชุซูุฑู ุงูุชูููุฉ', 'ูุฌุชูุน ุงูุตุญุฉ ูุงูุนุงููุฉ',
  'ุงููุจุฏุนูู ูู ุงูุชุนููู', 'ุญูุงุฉ ุงูุจูุฆุฉ', 'ุงูููุงููู ูุงููุตูููู', 'ูุงุฏุฉ ุงูุฃุนูุงู',
  'ูุฌุชูุน ุงูุฐูุงุก ุงูุงุตุทูุงุนู', 'ุงูููุชููู ุจุงูุฃูู ุงูุณูุจุฑุงูู'
];

function randomElement(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

function randomNumber(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function randomDate(start, end) {
  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
}

async function generateUsers(client, count) {
  console.log(`\n๐ ุฅูุดุงุก ${count} ูุณุชุฎุฏู...`);
  const users = [];
  const password = await bcrypt.hash('123456', 10);
  
  for (let i = 0; i < count; i++) {
    const firstName = randomElement(firstNames);
    const lastName = randomElement(lastNames);
    const username = `${firstName}_${lastName}_${randomNumber(1, 999)}`;
    const email = `${username.toLowerCase().replace(/\s/g, '')}@test.com`;
    
    const result = await client.query(
      `INSERT INTO users (
        username, email, password, role, points, level,
        bio, avatar, is_sandbox, created_at
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, true, NOW())
      RETURNING id, username, email`,
      [
        username,
        email,
        password,
        randomElement(['user', 'investor', 'project_owner']),
        randomNumber(0, 10000),
        randomNumber(1, 10),
        `ูุฑุญุจุงู! ุฃูุง ${firstName} ${lastName}ุ ููุชู ุจุงูุชูููุฉ ูุงูุงุจุชูุงุฑ.`,
        `https://ui-avatars.com/api/?name=${firstName}+${lastName}&background=random`,
      ]
    );
    
    users.push(result.rows[0]);
    
    // Create wallet for each user
    await client.query(
      `INSERT INTO wallets (
        user_id, balance, pending_balance, total_earned, is_sandbox
      ) VALUES ($1, $2, $3, $4, true)`,
      [result.rows[0].id, randomNumber(0, 50000), randomNumber(0, 5000), randomNumber(0, 100000)]
    );
  }
  
  console.log(`โ ุชู ุฅูุดุงุก ${users.length} ูุณุชุฎุฏู`);
  return users;
}

async function generateProjects(client, users, count) {
  console.log(`\n๐ ุฅูุดุงุก ${count} ูุดุฑูุน...`);
  const projects = [];
  
  for (let i = 0; i < count; i++) {
    const owner = randomElement(users);
    const title = randomElement(projectTitles);
    const fundingGoal = randomNumber(50000, 500000);
    const currentFunding = randomNumber(0, fundingGoal);
    
    const result = await client.query(
      `INSERT INTO projects (
        creator_id, title, description, category, funding_goal, current_funding,
        backers_count, status, image, is_sandbox, created_at
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, true, NOW())
      RETURNING id, title`,
      [
        owner.id,
        title,
        `${title} - ูุดุฑูุน ูุจุชูุฑ ููุฏู ุฅูู ุชุญุณูู ุงูุฎุฏูุงุช ูุชูุฏูู ุญููู ุฐููุฉ ูููุณุชุฎุฏููู.`,
        randomElement(projectCategories),
        fundingGoal,
        currentFunding,
        randomNumber(0, 100),
        randomElement(['active', 'funding', 'completed']),
        'https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=800',
      ]
    );
    
    projects.push(result.rows[0]);
    
    // Create negotiation gate for some projects
    if (Math.random() > 0.5) {
      await client.query(
        `INSERT INTO negotiation_gates (
          project_id, min_support_amount, deposit_amount, is_open,
          max_negotiators, current_negotiators, title, description
        ) VALUES ($1, $2, $3, true, $4, $5, $6, $7)`,
        [
          result.rows[0].id,
          randomNumber(10000, 50000),
          randomNumber(1000, 5000),
          randomNumber(5, 20),
          randomNumber(0, 5),
          'ุจูุงุจุฉ ุงูุชูุงูุถ ุงูููุชูุญุฉ',
          'ูุฑุญุจ ุจุงููุณุชุซูุฑูู ุงูุฌุงุฏูู ููุชูุงูุถ ุญูู ุดุฑูุท ุงูุงุณุชุซูุงุฑ'
        ]
      );
    }
  }
  
  console.log(`โ ุชู ุฅูุดุงุก ${projects.length} ูุดุฑูุน`);
  return projects;
}

async function generateCommunities(client, users, count) {
  console.log(`\n๐ ุฅูุดุงุก ${count} ูุฌุชูุน...`);
  const communities = [];
  
  for (let i = 0; i < count; i++) {
    const creator = randomElement(users);
    const name = communityNames[i] || `ูุฌุชูุน ${i + 1}`;
    
    const result = await client.query(
      `INSERT INTO communities (
        creator_id, name, slug, description, category, member_count,
        is_private, is_sandbox, created_at
      ) VALUES ($1, $2, $3, $4, $5, $6, false, true, NOW())
      RETURNING id, name`,
      [
        creator.id,
        name,
        name.toLowerCase().replace(/\s/g, '-'),
        `${name} - ูุฌุชูุน ูุดุท ูุฌูุน ุงูููุชููู ุจูุฐุง ุงููุฌุงู ูุชุจุงุฏู ุงูุฎุจุฑุงุช ูุงูุฃููุงุฑ.`,
        randomElement(['tech', 'business', 'health', 'education']),
        randomNumber(10, 500),
      ]
    );
    
    communities.push(result.rows[0]);
    
    // Add random members
    const memberCount = randomNumber(5, 15);
    for (let j = 0; j < memberCount; j++) {
      const member = randomElement(users);
      try {
        await client.query(
          `INSERT INTO community_members (
            community_id, user_id, role, points, level, joined_at
          ) VALUES ($1, $2, $3, $4, $5, NOW())
          ON CONFLICT DO NOTHING`,
          [
            result.rows[0].id,
            member.id,
            j === 0 ? 'admin' : randomElement(['member', 'moderator']),
            randomNumber(0, 1000),
            randomNumber(1, 5),
          ]
        );
      } catch (e) {
        // Ignore duplicates
      }
    }
  }
  
  console.log(`โ ุชู ุฅูุดุงุก ${communities.length} ูุฌุชูุน`);
  return communities;
}

async function generateTransactions(client, users, count) {
  console.log(`\n๐ ุฅูุดุงุก ${count} ูุนุงููุฉ...`);
  
  const types = ['deposit', 'withdrawal', 'investment', 'commission', 'reward'];
  
  for (let i = 0; i < count; i++) {
    const user = randomElement(users);
    const type = randomElement(types);
    const amount = randomNumber(100, 10000);
    
    await client.query(
      `INSERT INTO transactions (
        user_id, type, amount, status, description, created_at
      ) VALUES ($1, $2, $3, $4, $5, NOW())`,
      [
        user.id,
        type,
        amount,
        randomElement(['completed', 'pending', 'failed']),
        `ูุนุงููุฉ ${type} ุจูููุฉ ${amount} ุฑูุงู`,
      ]
    );
  }
  
  console.log(`โ ุชู ุฅูุดุงุก ${count} ูุนุงููุฉ`);
}

async function generateReferralCodes(client, users) {
  console.log(`\n๐ ุฅูุดุงุก ุฃููุงุฏ ุฅุญุงูุฉ...`);
  
  for (const user of users.slice(0, 20)) {
    const code = `REF${user.id}${randomNumber(1000, 9999)}`;
    
    try {
      await client.query(
        `INSERT INTO referral_codes (user_id, code) VALUES ($1, $2) ON CONFLICT DO NOTHING`,
        [user.id, code]
      );
    } catch (e) {
      // Ignore errors
    }
  }
  
  console.log(`โ ุชู ุฅูุดุงุก ุฃููุงุฏ ุงูุฅุญุงูุฉ`);
}

async function main() {
  const client = await pool.connect();
  
  try {
    console.log('๐ ุจุฏุก ุฅูุดุงุก ุงูุจูุงูุงุช ุงูููููุฉ...\n');
    
    await client.query('BEGIN');
    
    // Generate data
    const users = await generateUsers(client, 50);
    const projects = await generateProjects(client, users, 30);
    const communities = await generateCommunities(client, users, 10);
    await generateTransactions(client, users, 100);
    await generateReferralCodes(client, users);
    
    await client.query('COMMIT');
    
    console.log('\nโ ุชู ุฅูุดุงุก ุฌููุน ุงูุจูุงูุงุช ุงูููููุฉ ุจูุฌุงุญ!');
    console.log('\n๐ ุงูููุฎุต:');
    console.log(`   - ${users.length} ูุณุชุฎุฏู`);
    console.log(`   - ${projects.length} ูุดุฑูุน`);
    console.log(`   - ${communities.length} ูุฌุชูุน`);
    console.log(`   - 100 ูุนุงููุฉ`);
    console.log(`   - 20 ููุฏ ุฅุญุงูุฉ`);
    
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('โ ุฎุทุฃ:', error);
    throw error;
  } finally {
    client.release();
    await pool.end();
  }
}

main().catch(console.error);

